{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","loader.js","modal/modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","console","log","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","jusifyContent","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","setTimeout","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.728c057e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext() \r\n\r\nexport default Context","import React, {useContext} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from '../context'\r\n\r\nconst styles = {\r\n    li: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        padding: '.5rem 1rem',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '4px',\r\n        marginBottom: '.5rem'\r\n    },\r\n\r\n    input :{\r\n        marginRight: '1rem'\r\n    }\r\n}\r\n\r\nfunction TodoItem({todo, index, onChange}){\r\n    const {removeTodo} = useContext(Context)\r\n    console.log('todo', todo)\r\n    const classes =[]\r\n    if (todo.completed){\r\n        classes.push('done')\r\n    }\r\n    return (\r\n        <li style={styles.li}>\r\n            <span className={classes.join(' ')}>\r\n                <input type=\"checkbox\" \r\n                checked={todo.completed}\r\n                style={styles.input} \r\n                onChange={()=>onChange(todo.id)}/>\r\n                <strong>{index + 1}</strong>\r\n                &nbsp;\r\n                {todo.title}\r\n            </span>\r\n            <button className='rm' onClick = {removeTodo.bind(null, todo.id)}>&times;</button>\r\n            \r\n        </li>\r\n    )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TodoItem from './TodoItem'\r\n\r\nconst styles = {\r\n    ul:{\r\n        listStyle:'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\n\r\nfunction TodoList(props){\r\n    return(\r\n        <ul style={styles.ul}>\r\n            {props.todos.map((todo, index) =>{\r\n                return <TodoItem todo={todo} key={todo.id} index={index} onChange={props.onToggle}/>\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import React from 'react'\r\n\r\nexport default () => (\r\n<div style={{display: 'flex', jusifyContent: 'center', margin: '5rem'}}>\r\n    <div className=\"lds-ellipsis\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n</div>\r\n)","import React from 'react'\r\nimport './Modal.css'\r\n\r\nexport default class Modal extends React.Component{\r\n    state = {\r\n        isOpen: false\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <button onClick={() => this.setState({isOpen: true})}>Open modal</button>\r\n\r\n                {this.state.isOpen && (<div className='modal'>\r\n                    <div className='modal-body'>\r\n                        <h1>Model title</h1>\r\n                        <p>I am awesome modal</p>\r\n                        <button onClick={() => this.setState({isOpen: false})}>Close modal</button>\r\n                    </div>\r\n                </div>)}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, {useEffect} from 'react';\nimport TodoList from './Todo/TodoList'\nimport Context from './context'\n//import AddTodo from './Todo/AddTodo'\nimport Loader from './loader'\nimport Modal from './modal/modal'\n\nconst AddTodo = React.lazy(() => import('./Todo/AddTodo'))\n\nfunction App() {\n  const [todos, setTodos] = React.useState([])\n  const [loading, setLoading] = React.useState(true)\n\n\n  useEffect(()=>{\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n      .then(response => response.json())\n      .then(todos => {\n        setTimeout(()=>{\n          setTodos(todos)\n          setLoading(false)\n        }, 2000)\n      })\n  }, [])\n\nfunction toggleTodo (id){\n  setTodos(\n  todos.map(todo => {\n    if (todo.id === id){\n      todo.completed = !todo.completed\n    }\n    return todo\n  }))\n}\n\nfunction removeTodo(id) {\n  setTodos(todos.filter(todo => todo.id !== id))\n}\n\nfunction addTodo(title){\n  setTodos(todos.concat([{\n    title,\n    id: Date.now(),\n    completed: false\n  }]))\n}\n\n\n  return (\n    <Context.Provider value={{removeTodo}}>\n      <div className='wrapper'>\n        <h1>React tutorial</h1>\n        <Modal/>\n        <React.Suspense fallback={<p>Loading...</p>}>\n        <AddTodo onCreate={addTodo}/>\n        </React.Suspense>\n        \n        {loading && <Loader />}\n\n        {todos.length ? ( <TodoList todos={todos} onToggle={toggleTodo} /> \n        ) : loading ? null : (\n          <p>No todos</p>\n        )}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}